import React, { useEffect, useState } from "react";
import { useTheme } from "../ThemeProvider";

// LoaderWrapper component that can contain the Loader and optional text
const LoaderWrapper = ({
  children,
  className = "",
  fullScreen = false,
  overlay = false
}) => {
  const wrapperClasses = `
    flex flex-col items-center justify-center
    ${fullScreen ? "fixed inset-0 z-50" : "relative"}
    ${overlay ? "bg-white/80 backdrop-blur-sm" : ""}
    ${className}
  `.trim();

  return <div className={wrapperClasses}>{children}</div>;
};

const Loader = ({
  size = 100,
  className = "",
  duration = 2000,
  text = "LOADING",
  showText = true,
  forceTheme = null // Add option to force a specific theme
}) => {
  const { theme, loaderTheme } = useTheme();

  // Determine which theme to use - priority:
  // 1. Explicitly forced theme (if provided)
  // 2. Dedicated loaderTheme (from context)
  // 3. Fall back to main app theme
  const effectiveTheme = forceTheme || loaderTheme || theme;

  // Set fill color based on the effective theme
  const fill = effectiveTheme === "dark" ? "#F0D6F6" : "#381B4C";

  const height = (size * 86) / 100;
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    let animationFrame;
    let startTime;

    const animate = (timestamp) => {
      if (!startTime) startTime = timestamp;
      const elapsed = timestamp - startTime;
      const newProgress = (elapsed % duration) / duration;
      setProgress(newProgress);
      animationFrame = requestAnimationFrame(animate);
    };

    animationFrame = requestAnimationFrame(animate);
    return () => cancelAnimationFrame(animationFrame);
  }, [duration]);

  return (
    <div className="relative flex items-center justify-center">
      <svg
        width={size}
        height={height}
        className={`${className} transition-opacity`}
        viewBox="0 0 100 86"
        fill={fill}
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <g clipPath="url(#clip0_loader)">
          {/* Outer circle/path with animation */}
          <path
            d="M71.4419 71.3149L71.4267 71.3031C71.2474 71.167 71.0234 71.103 70.7991 71.1239C70.5748 71.1448 70.3665 71.249 70.2156 71.4159L70.1941 71.4395C66.6808 75.3002 62.5593 78.3262 57.9446 80.4332C53.1183 82.6368 47.911 83.7539 42.4688 83.7539C36.9796 83.7539 31.6557 82.681 26.6449 80.5656C21.8041 78.5219 17.4562 75.5956 13.7221 71.8684C9.98794 68.1411 7.05645 63.8009 5.00892 58.9678C2.88899 53.9672 1.81434 48.6521 1.81434 43.1739C1.81434 37.6957 2.88978 32.3803 5.00839 27.3787C7.05592 22.5466 9.98741 18.2065 13.7215 14.4781C17.4557 10.7498 21.8036 7.82452 26.6444 5.78058C31.6543 3.6652 36.9791 2.59233 42.468 2.59233H48.8175C49.0583 2.59233 49.2891 2.49695 49.4594 2.32716C49.6296 2.15738 49.7253 1.92709 49.7254 1.68694C49.7253 1.44676 49.6296 1.21645 49.4594 1.04662C49.2892 0.876791 49.0583 0.78135 48.8175 0.781281H42.468C19.0135 0.781281 0.00131151 19.7605 0.00131151 43.1726H0C0 66.5846 19.0135 85.5639 42.468 85.5639C54.2089 85.5639 64.355 80.5609 71.5615 72.6275C71.6448 72.5356 71.7081 72.4276 71.7474 72.3101C71.7867 72.1927 71.8012 72.0684 71.79 71.945C71.7787 71.8217 71.742 71.7021 71.6821 71.5936C71.6222 71.4851 71.5404 71.3903 71.4419 71.3149Z"
            fill={fill}
            opacity={0.4}
          />

          {/* The clip path for circular progress */}
          <clipPath id="progress-clip">
            <path
              d={`M50,43 L50,0 A50,43 0 ${progress > 0.5 ? 1 : 0},1 ${50 + 50 * Math.sin(progress * Math.PI * 2)
                },${43 - 43 * Math.cos(progress * Math.PI * 2)} Z`}
            />
          </clipPath>

          {/* Filled path with progress clip */}
          <path
            d="M71.4419 71.3149L71.4267 71.3031C71.2474 71.167 71.0234 71.103 70.7991 71.1239C70.5748 71.1448 70.3665 71.249 70.2156 71.4159L70.1941 71.4395C66.6808 75.3002 62.5593 78.3262 57.9446 80.4332C53.1183 82.6368 47.911 83.7539 42.4688 83.7539C36.9796 83.7539 31.6557 82.681 26.6449 80.5656C21.8041 78.5219 17.4562 75.5956 13.7221 71.8684C9.98794 68.1411 7.05645 63.8009 5.00892 58.9678C2.88899 53.9672 1.81434 48.6521 1.81434 43.1739C1.81434 37.6957 2.88978 32.3803 5.00839 27.3787C7.05592 22.5466 9.98741 18.2065 13.7215 14.4781C17.4557 10.7498 21.8036 7.82452 26.6444 5.78058C31.6543 3.6652 36.9791 2.59233 42.468 2.59233H48.8175C49.0583 2.59233 49.2891 2.49695 49.4594 2.32716C49.6296 2.15738 49.7253 1.92709 49.7254 1.68694C49.7253 1.44676 49.6296 1.21645 49.4594 1.04662C49.2892 0.876791 49.0583 0.78135 48.8175 0.781281H42.468C19.0135 0.781281 0.00131151 19.7605 0.00131151 43.1726H0C0 66.5846 19.0135 85.5639 42.468 85.5639C54.2089 85.5639 64.355 80.5609 71.5615 72.6275C71.6448 72.5356 71.7081 72.4276 71.7474 72.3101C71.7867 72.1927 71.8012 72.0684 71.79 71.945C71.7787 71.8217 71.742 71.7021 71.6821 71.5936C71.6222 71.4851 71.5404 71.3903 71.4419 71.3149Z"
            fill={fill}
            clipPath="url(#progress-clip)"
          />

          {/* The small circle that pulses */}
          <path
            d="M79.4418 65.6637C80.4322 64.6739 80.4319 63.0717 79.4412 62.0851C78.4505 61.0985 76.8445 61.1011 75.8541 62.0908C74.8637 63.0806 74.864 64.6828 75.8547 65.6694C76.8454 66.656 78.4514 66.6534 79.4418 65.6637Z"
            fill={fill}
            style={{
              transform: `scale(${1 + 0.2 * Math.sin(progress * Math.PI * 4)})`,
              transformOrigin: "center",
              opacity: 0.7 + 0.3 * Math.sin(progress * Math.PI * 4)
            }}
          />

          {/* The internal B icon */}
          <path
            d="M99.8743 27.9866C99.3702 28.6363 98.3414 29.7076 97.6697 30.3913C97.2736 30.7972 96.8984 31.2228 96.5455 31.6665C91.4439 38.0385 83.934 39.1823 78.3446 38.9651C74.9656 38.8343 71.6428 38.0788 68.5159 36.7932C59.7812 33.2041 53.8049 33.577 51.5725 33.9224C51.4329 33.9438 51.3713 33.7549 51.4959 33.6887C56.5337 31.0144 56.8482 26.1365 56.8482 26.1365V24.73C56.8482 21.9419 55.5146 19.3133 53.2439 17.6894C52.6503 17.2678 52.0263 16.8904 51.3771 16.5603C48.982 15.333 46.3186 14.7189 43.626 14.7189H27.8355V16.2104C28.0983 16.2105 28.3586 16.2622 28.6014 16.3626C28.8442 16.463 29.0649 16.6102 29.2507 16.7956C29.4365 16.9811 29.5839 17.2013 29.6844 17.4436C29.7849 17.6859 29.8366 17.9455 29.8366 18.2078V35.1881C17.591 41.6316 19.1522 54.8454 19.1522 54.8454C19.467 60.2563 26.6559 77.6508 44.2836 74.029C56.0439 71.6124 60.1036 62.7045 61.4993 57.1934C62.4871 53.2931 62.0674 49.1558 60.2402 45.5703C56.6265 38.4836 49.526 37.2752 48.0511 37.0983C47.597 36.7346 47.7667 36.1956 48.156 36.0752C55.0155 33.9499 65.7098 37.388 70.6206 39.2365C72.7762 40.0502 75.0302 40.5758 77.324 40.7997V42.7272H76.0675V43.7619V54.9574V56.5224H77.0829L77.6508 61.3519L78.2478 56.5224H79.4945V42.7267H78.8451V40.9007C80.1158 40.9472 81.3883 40.8967 82.6513 40.7497C87.3633 40.2002 90.9839 38.4831 93.5786 36.7053C96.6144 34.6265 98.8616 31.5911 99.9829 28.0923L99.9963 28.0504C100.001 28.0348 100 28.018 99.9941 28.0029C99.9878 27.9878 99.9764 27.9754 99.962 27.9678C99.9475 27.9603 99.9308 27.958 99.9147 27.9614C99.8987 27.9648 99.8844 27.9737 99.8743 27.9866ZM46.6795 70.4511C38.658 74.1821 32.6248 72.2143 28.4784 69.0708C22.6086 64.6208 19.6989 57.2305 20.9946 49.9882C22.1351 43.6145 25.9477 39.8653 29.8342 37.6659V63.9448C29.8342 64.1327 29.7972 64.3187 29.7251 64.4923C29.6531 64.6659 29.5475 64.8236 29.4144 64.9565C29.2812 65.0894 29.1232 65.1948 28.9492 65.2667C28.7752 65.3386 28.5888 65.3756 28.4005 65.3757V66.3677H35.2397V65.3765H34.3059C34.1655 65.3765 34.0308 65.3208 33.9315 65.2217C33.8321 65.1226 33.7763 64.9883 33.7763 64.8481V49.4355L44.3426 39.2129C44.6938 38.8737 45.1293 38.6341 45.6042 38.5188C46.0791 38.4035 46.5763 38.4168 47.0444 38.5572C60.2035 42.4873 63.1361 62.7966 46.679 70.4511H46.6795ZM46.7684 34.9461L33.7774 45.698V35.8996C35.2583 35.4304 37.2634 35.024 38.5468 34.7875C38.7084 34.7577 38.8622 34.6952 38.9987 34.6039C39.1351 34.5125 39.2514 34.3942 39.3402 34.2562C39.429 34.1183 39.4885 33.9637 39.5151 33.8019C39.5416 33.6401 39.5346 33.4745 39.4945 33.3156C39.4189 33.0171 39.2314 32.759 38.9706 32.5946C38.7098 32.4301 38.3957 32.3717 38.093 32.4316C37.762 32.4969 37.4411 32.5639 37.1304 32.6326C35.9972 32.8707 34.8779 33.1703 33.7774 33.5301V16.2099H43.5421C43.6093 16.2067 43.6761 16.2042 43.7425 16.2023C48.4967 16.0636 52.4121 19.9094 52.4121 24.6573V26.6489C52.4127 27.7765 52.0859 28.8803 51.4712 29.8266C49.8507 32.3207 46.7684 34.9461 46.7684 34.9461ZM78.8435 44.6196H76.6708V45.3874H78.0818V46.0583H76.8723V47.1984H78.8435V47.8021H76.8051V48.607H78.0818V49.2107H76.6708V50.0826H78.0818V51.29H76.8051V51.8267H77.4546V52.6316H76.738V53.2353H78.0818V54.5096H76.3456V43.8448H78.8435V44.6196Z"
            fill={fill}
            style={{
              opacity: 0.85
            }}
          />
        </g>
        <defs>
          <clipPath id="clip0_loader">
            <rect
              width="100"
              height="84.7826"
              fill="white"
              transform="translate(0 0.782593)"
            />
          </clipPath>
        </defs>
      </svg>

      {/* Optional loading text */}
      {showText && (
        <div
          className="absolute -bottom-6 text-center text-sm font-medium"
          style={{ color: fill, opacity: 0.8 }}
        >
          {text}
        </div>
      )}
    </div>
  );
};

// Export both components
export { LoaderWrapper, Loader };